pico-8 cartridge // http://www.pico-8.com
version 27
__lua__

actors = {}
input_buffer = {}
flags = {WALL = 0, DANGER = 1}
buffer_pos = 0
state = game
debug = true
t = 0
gravity = 1
btnrbits = 0x0
prevbtn = 0
function _init()
	state = game
	player = create_player(64-4, 0)
	crate = place_crate()
	add(actors,player)
end

function _update()
	btnrbits = prevbtn & ~btn()
	if (state.update) then
	 state.update()
	end
	prevbtn = btn()
end

function _draw()

	if (state.draw) then
		state.draw()
	end
	print(stat(7), 5, 5)

end



function create_object(x,y,width,height,sprite)
	local a = {
		x = x,
		y = y,
		width = width,
		height = height,
		dx = 0,
		dy = 0,
		sprite = sprite,
		debug_text = '',
		draw = function(self) 
			spr(self.sprite, self.x, self.y, 1, 1, not self.facing_right, false)
			if (debug) then 
				--rect(self.x,self.y,self.x+self.width-1,self.y+self.height-1)
				print(self.debug_text, self.x+self.width, self.y-8)
			end
		end,
		move = function(self)

		end
	}
	add(actors,a)
	return a
end



function create_coin(x,y)
	local a = create_object(x,y,8,8, 48)
	
	local move = function(self)
		self.y -= sin((self.x+t)/20)/2
		--self.x += cos((self.offset+t)/20)/2
	end
	a.move = move
	a.offset = rnd(128)

	return a
end

function create_crate(x,y)
	local a = create_object(x,y,8,8,34)
	local on_coll = function(self, coll) 

	end 
	return a
end

function place_crate()
	local x = 0
	local y = 0
	local clearground = false

	while (not clearground) do
		x = rndi(15, 0)*8
		y = rndi(15, 0)*8
		if (not is_solid(x,y,8,8) and is_solid(x,y+8,8,8)) clearground = true		
	end

	return create_crate(x,y)

end
--[[ function collisions()
	for i=1,#actors do
		for j=i+1,#actors do
			if (touching())
			collide(actors[i],actors[j])
		end
	end
end ]]







function check_collisions(self)
	--[[for a in all(actors) do
		if (not(self == a)) then
			if (colliding(self, a)) then
				print(0)
				return true
			end
		end
	end]]--

	return false
end	

function is_solid(x,y, w, h) --Check if a point is solid
	--local val = mget(flr(x/8), flr((y-1)/8))
	return tile_flag_at(x,y,w,h,flags.WALL)
end
	

function rndi(max, min) --Return a random number from min-max inclusive
	return (flr(rnd(max)) + min)
end

function colliding(rect1, rect2)
	return (rect1.x < rect2.x + rect2.width and
		rect1.x + rect1.width > rect2.x and
		rect1.y < rect2.y + rect2.height and
		rect1.y + rect1.height > rect2.y)
end



function tile_flag_at(x,y,w,h,flag)
 for i=max(0,flr(x/8)),min(15,(x+w-1)/8) do
 	for j=max(0,flr(y/8)),min(15,(y+h-1)/8) do
 		if fget(tile_at(i,j),flag) then
 			return true
 		end
 	end
 end
	return false
end

function tile_at(x,y)
 return mget(x, y)
end

function btnr(i, p)
	local bit = 2^i
	if (p) bit *= p * 16 * 16 --idk probably a way to simplify this but it works
	return ((btnrbits & bit) >>> i)	
end

-->8
-- player

function create_player(x,y)
	local a = create_object(x,y,8,8,1)
	
	a.move = move_player
	a.update = update_pos
	a.check_collisions = check_collisions
	a.is_grounded = is_grounded
	a.dx = 0
	a.dy = 0
	a.max_dx = 3
	a.gravity = 10
	a.drag = 0.75
	a.jump_velocity = 5
	a.jump_frames = 5
	a.jump_frames_left = 0
	a.is_jumping = false
	a.is_running = false
	a.facing_right = true
	a.anim = create_anim()
	local walk = {1,2}
	a.anim.anims = {walk}
	a.anim.current_anim = 1

	return a
end

function move_player(self, ddx) --Accelerate the player
	if (not ddx) return
	self.is_running = true
	self.facing_right = ddx >= 0
	if (sgn(ddx) != sgn(self.dx)) self.dx = 0 --If they're changing direction, get rid of their opposing acceleration
	self.dx += ddx
	
	--self.dy = ((ddy or 0) * self.dy) + self.gravity
	
end

function update_pos(self)
	self.dy += gravity
	if (not self.is_running) self.dx *= self.drag
	
	if (self.is_jumping and self.jump_frames_left > 0) then 
		self.dy = -self.jump_velocity
		self.jump_frames_left -= 1
	elseif (self:is_grounded()) then
		self.jump_frames_left = self.jump_frames
	end	
	
	for newdy = 0, self.dy, sgn(self.dy) do --Map collision
		if (not is_solid(self.x, self.y + newdy, self.width, self.height)) then
			self.dy = newdy
		end
	end

	for newdx = 0, self.dx, sgn(self.dx) do
		if (not is_solid(self.x + newdx, self.y + self.dy, self.width, self.height)) then
			self.dx = newdx
		end
	end



	self.dx = mid(-self.max_dx, self.dx, self.max_dx)

	self.x += self.dx;
	self.y += self.dy;
	self.debug_text = self.jump_frames_left
	if (self.x > 128-self.width) self.x = 0
	if (self.x < 0) self.x = 128-self.width
	
end

function is_grounded(self)
	local bottom = self.y + self.height + 1
	return is_solid(self.x, bottom, self.width, self.height)
end
-->8
-- game state



function game_update()
	if btn(0) then player:move(-1)end
	if btn(1) then player:move(1) end
	player.is_running = btn(0) or btn(1) 
	player.is_jumping = btn(2)
	if (not player.is_jumping) player.jump_frames_left = 0
	player:update()
	for a in all(actors) do
		a:move()
	end
	t+=1
end

function game_draw()
	cls()
	map(0,0,0,0,16,16)


	for a in all(actors) do
		a:draw()
	end

end

--after functions

game = {}
game.name = "game"
game.update = game_update
game.draw = game_draw
-->8
-- anim player

function create_anim()
	local p = {
		frame = 0,
		current_anim = 0,
		current_sprite,
		anims = {},
		update = function(self)
			local anim = self.anims[self.current_anim+1]
			self.frame %= #anim
			self.current_sprite = anim[self.frame+1]
			self.frame += 1
		end
		
	}
	return p
	
	
	
end	
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001111110000000030000000000eeee000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001111111100333333011111100eeeeee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001111441103bbbbb0111111110ee0e0e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000117424710b7b3b7011114411eee1e1ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000914424490bbb3bb011742471eeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000014444441bbbbbbb00944244908eeee800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000400004000000b0044444444088008800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccccccccccccccccc00000056000000000088880000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccccccccccccccccc00000567000442000888888000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccc777ccccc777ccc000056700041410028888e8800000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccc77777ccc77777770a056700004442002888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccc677777cc66777770aa67000066655502888888800000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccc6667ccccc6667c00490000046655406677777700000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccccccccccccccccc04099000006655000667777000000000000000000000000000000000000000000000000000000000000000000000000000000000
cccccccccccccccccccccccc40000000004004000066660000000000000000000000000000000000000000000000000000000000000000000000000000000000
eeee2eee8888888811111111ccc76ccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88882e888888888819aaaa91ccc76ccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88882e880000000019444491ccc76ccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
222222220000000019999991cc7765cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2eeeeeee0000000019999991cc7765cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2e8888880000000019aaaa91cc7665cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2e8888888888888814444441c776655c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
222222228888888811111111c766665c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0009aa000003bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
009aaaa0003bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
009aaaa0003bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
009aaaa0003bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
009aaaa0003bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0009aa000003bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000010104010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
2020202020201010101020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101011101010101010121010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010102020202010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101011102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010121010101010101011101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2020202020201010101020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010102020202010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2010101010101010101010101010102000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2020202020201010101020202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2020202020202323232320202020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
